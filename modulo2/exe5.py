"""
Exerc√≠cio 5

Utilize polimorfismo criando um m√©todo apresentar() em Professor e Estudante que funciona de
forma diferente em cada classe.

"""

print("\n" + "="*60)
print("EXERC√çCIO 5 - POLIMORFISMO")
print("="*60)

from exe1 import Pessoa

class ProfessorPolimorfismo(Pessoa):
    def __init__(self, nome, idade, disciplina, salario):
        super().__init__(nome, idade)
        self.disciplina = disciplina
        self.salario = salario

    # M√©todo apresentar() espec√≠fico para Professor
    def apresentar(self):
        return f"üéì Professor {self.nome}, {self.idade} anos - Ensina {self.disciplina}"

class EstudantePolimorfismo(Pessoa):
    def __init__(self, nome, idade, curso, matricula):
        super().__init__(nome, idade)
        self.curso = curso
        self.matricula = matricula
    
     # M√©todo apresentar() espec√≠fico para Estudante
    def apresentar(self):
        return f"üìö Estudante {self.nome}, {self.idade} anos - Curso: {self.curso} (Mat: {self.matricula})"
    
# Criando objetos das duas classes
professor_poli = ProfessorPolimorfismo("Dr. Silva", 42, "F√≠sica", 6000.00)
estudante_poli = EstudantePolimorfismo("Bruna", 19, "Medicina", "2024005")

# POLIMORFISMO EM A√á√ÉO!
# O mesmo m√©todo "apresentar()" se comporta diferente em cada classe
print("Demonstra√ß√£o do Polimorfismo:")
print(professor_poli.apresentar())  # Chama o m√©todo da classe Professor
print(estudante_poli.apresentar())  # Chama o m√©todo da classe Estudante    


"""
#print("\n" + "-"*50)
print("POLIMORFISMO COM LISTA - Exemplo Avan√ßado")
print("-"*50)

# Criando uma lista com objetos de classes diferentes
pessoas = [
    ProfessorPolimorfismo("Ana Costa", 35, "Qu√≠mica", 5500.00),
    EstudantePolimorfismo("Pedro", 21, "Engenharia", "2023010"),
    ProfessorPolimorfismo("Jo√£o Santos", 50, "Hist√≥ria", 4800.00),
    EstudantePolimorfismo("Clara", 18, "Psicologia", "2024020")
]

# POLIMORFISMO: mesmo comando, comportamentos diferentes!
print("Lista de pessoas na escola:")
for pessoa in pessoas:
    # Python automaticamente chama o m√©todo correto para cada classe
    print(f"- {pessoa.apresentar()}")

print("\n" + "-"*50)
print("FUN√á√ÉO QUE USA POLIMORFISMO")
print("-"*50)

def exibir_informacoes(pessoa):
    
    Esta fun√ß√£o funciona com qualquer objeto que tenha o m√©todo apresentar()
    Isso √© POLIMORFISMO! N√£o importa se √© Professor ou Estudante
    
    print(f"Informa√ß√µes: {pessoa.apresentar()}")
    print(f"Tipo do objeto: {type(pessoa).__name__}")
    print()

# Testando a fun√ß√£o polim√≥rfica
print("Fun√ß√£o polim√≥rfica em a√ß√£o:")
exibir_informacoes(professor_poli)
exibir_informacoes(estudante_poli)

print("\n" + "="*60)
print("RESUMO DOS CONCEITOS APRENDIDOS")
print("="*60)
print("1. CLASSE: Molde/modelo para criar objetos")
print("2. OBJETO: Inst√¢ncia de uma classe")
print("3. HERAN√áA: Uma classe pode herdar de outra (reutilizar c√≥digo)")
print("4. ENCAPSULAMENTO: Controlar acesso aos dados (__privado)")
print("5. POLIMORFISMO: Mesmo m√©todo, comportamentos diferentes")
print("6. SELF: Refer√™ncia ao objeto atual")
print("7. __INIT__: M√©todo construtor (executado ao criar objeto)")
print("8. SUPER(): Chama m√©todos da classe pai")"""